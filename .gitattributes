using System;
using System.Diagnostics;

namespace TheSnakeProject
{
    internal class Project
    {
        static void Main(string[] args)
        {
            var Start = StartingConditions();

            // choose action:
            // w = up, s = down, a = left, d = right, q = add another link to the snake
            while (Start.Item2 == true)
            {
                ConsoleKeyInfo Button = Console.ReadKey();                  // read input from keyboard
                Movement(Start.Item3, Start.Item1, Button);
            }
        }

        public static Tuple<int, bool, List<int>> StartingConditions()
        {
            Console.WriteLine("Choose level!");
            Console.WriteLine("e = Easy, m = Medium, h = Hard");
            ConsoleKeyInfo Button = Console.ReadKey();
            int step = 0;
            if (Button.Key == ConsoleKey.E)
            {
                step = 700;
            }
            if (Button.Key == ConsoleKey.M)
            {
                step = 500;
            }
            if (Button.Key == ConsoleKey.H)
            {
                step = 300;
            }
            int xStart = 0;
            int yStart = 0;
            bool Dead = true;
            List<int> PositionCoordinates = new List<int>();                // create first part of snake as the first entries of the list
            PositionCoordinates.Add(xStart);
            PositionCoordinates.Add(yStart);
            Console.WriteLine("Press w to start");
            return Tuple.Create(step, Dead, PositionCoordinates);
        }

        // method to move
        static void Movement(List<int> UpdatePosition, int Sleep, ConsoleKeyInfo But)
        {
            while (!Console.KeyAvailable)                                       // read if key is available
            {
                if (UpdatePosition.Count > 2)                                   // length of list without the initial entries
                {
                    for (int j = UpdatePosition.Count - 1; j > 1;)              // update coordinates for each additional link starting from behind
                    {
                        UpdatePosition[j] = UpdatePosition[j - 2];
                        j = j - 1;
                    }
                }
                if (But.Key == ConsoleKey.W)
                {
                    UpdatePosition[1]++;                                        // "move" first link one step

                }
                if (But.Key == ConsoleKey.S)
                {
                    UpdatePosition[1]--;
                }
                if (But.Key == ConsoleKey.A)
                {
                    UpdatePosition[0]--;
                }
                if (But.Key == ConsoleKey.D)
                {
                    UpdatePosition[0]++;
                }
                UpdatePosition.ForEach(i => Console.Write("{0}\t", i));         // write the position of each link in order from left to right
                Console.WriteLine("");
                if (UpdatePosition[0] == 5 || UpdatePosition[1] == 5)
                {
                    UpdatePosition.Add(UpdatePosition[0]);
                    UpdatePosition.Add(UpdatePosition[1]);
                }
                Thread.Sleep(Sleep);                                            // delay with length SleepTime
            }
        }
    }
}
